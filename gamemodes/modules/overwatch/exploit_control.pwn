#include <YSI_Coding\y_hooks>
#if !defined IsValidVehicle
    native IsValidVehicle(vehicleid);
#endif

// ========================================================================== //
//                       <section> Definicije </section>                      //
// ========================================================================== //
#define MAX_AUTOBULLET_INFRACTIONS          3
#define AUTOBULLET_RESET_DELAY              30




// ========================================================================== //
//                       <section> Enumeratori </section>                     //
// ========================================================================== //





// ========================================================================== //
//                      <section> Promenljive </section>                      //
// ========================================================================== //
static gLastBulletShot[MAX_PLAYERS];
static gEditingObjectModel[MAX_PLAYERS];
// static gAutoBulletInfractions[MAX_PLAYERS];
// static gLastInfractionTime[MAX_PLAYERS];

static bool:gPlayerDebug[MAX_PLAYERS];




// ========================================================================== //
//                       <section> Callback-ovi </section>                    //
// ========================================================================== //
hook OnIncominSQLection(playerid, ip_address[], port)
{
	if(IsPlayerNPC(playerid))
		return 1;
	
	if (CountPlayersWithIP(ip_address) > 4)
	{
		new playerName[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playerName, sizeof playerName);
		BlockIpAddress(ip_address, 60*60*1000);

		printf("- AC:[anti-flood] IP block: %s (%s:%i)", playerName, ip_address, port);
		return ~0;
	}
	return 1;
}

hook OnPlayerConnect(playerid)
{
	gLastBulletShot[playerid] = 0;
	gEditingObjectModel[playerid] = -1;
	gPlayerDebug[playerid] = false;
}

hook OnPlayerUpdate(playerid)
{
    if(GetPlayerCameraMode(playerid) == 53) 
    { 
        new Float:pos[3];
        GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
        if (pos[2] <= -20000.0 || pos[2] >= 20000.0)
        {
            return ~0;
        }
    }  
    return 1;
} 

hook OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	// if (gPlayerDebug[playerid])
	// {
	// 	new sLog[90];
	// 	format(sLog, sizeof sLog, "OnPlayerWeaponShot(%i, %i, %i, %i, %.2f, %.2f, %.2f)", playerid, weaponid, hittype, hitid, fX, fY, fZ);
	// 	DebugPlayer(playerid, sLog);
	// }


	new tick = NetStats_GetConnectedTime(playerid),
		tickDiff = tick - gLastBulletShot[playerid],
		Float:x, Float:y, Float:z;
    
    gLastBulletShot[playerid] = tick; 
    GetPlayerPos(playerid, x, y, z);

    // Desinhronizacija oruzja koja ne ispaljuju metke
    if (!((22 <= weaponid <= 34) || weaponid == 38))
        return ~0;

    // Desinhronizacija pucnjeva kada je igraceva Z koordinata van razumnih granica
    if (!(-20000.0 <= z <= 20000.0))
        return ~0;

    if (hittype != BULLET_HIT_TYPE_NONE)
    {
    	if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) )
    		return ~0;
    }

    // Predaleki pucanj
    if ((hittype == BULLET_HIT_TYPE_NONE) && weaponid != WEAPON_SNIPER && GetPlayerDistanceFromPoint(playerid, fX, fY, fZ) > 300.0 && (fX != 0.0 && fY != 0.0 && fZ != 0.0))
    {
    	return ~0;
    }

    // Invalid hittype (neki koji nije definisan)
    if (!(BULLET_HIT_TYPE_NONE <= hittype <= BULLET_HIT_TYPE_PLAYER_OBJECT))
    {
    	return ~0;
    }

    // Rapidfire
    if (tickDiff <= 40 && weaponid != WEAPON_UZI && weaponid != WEAPON_TEC9 && weaponid != WEAPON_MP5 && weaponid != WEAPON_MINIGUN)
    {
    	return ~0;
    }

    // Invalid hit id
    if (   (hittype == BULLET_HIT_TYPE_PLAYER && (!IsPlayerConnected(hitid) || hitid == playerid)) 
    	|| (hittype == BULLET_HIT_TYPE_VEHICLE && !IsValidVehicle(hitid)) 
    	|| (hittype == BULLET_HIT_TYPE_VEHICLE && IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid) == hitid) 
    	|| (hittype == BULLET_HIT_TYPE_OBJECT && !IsValidObject(hitid)) 
    	|| (hittype == BULLET_HIT_TYPE_PLAYER_OBJECT && !IsValidPlayerObject(playerid, hitid)))
    {
    	return ~0;
    }

    // Autobullet
    // if(!IsPlayerInAnyVehicle(playerid))
    // {
    //     switch(weaponid)
    //     {
    //         case 27, 23, 25, 29, 30, 31, 33, 24, 38:
    //         {
    //             if(CheckSpeed(playerid))
    //             {
    //                 if(gettime() - LastInfractionTime[playerid] >= AUTOBULLET_RESET_DELAY) AutoBulletInfractions[playerid] = 1;
    //                 else AutoBulletInfractions[playerid]++;
    //                 LastInfractionTime[playerid] = gettime();

    //                 if(AutoBulletInfractions[playerid] == MAX_AUTOBULLET_INFRACTIONS)
    //                 {
    //                     AutoBulletInfractions[playerid] = 0;
    //                     CallLocalFunction("OnAntiCheatAutoBullet", "ii", playerid, weaponid);
    //                     return 0;
    //                 }
    //             }
    //         }
    //     }
    // }

    return 1;
}

hook OnVehicleMod(playerid, vehicleid, componentid)
{
	// Modding garaze su potpuno zabranjene
	// Ovaj callback se **NE** poziva preko AddVehicleComponent, tako da se svako modovanje odbacuje
    return ~0;
}

hook OnActorStreamIn(actorid, forplayerid)
{
	if (!IsValidActor(actorid) || !IsPlayerConnected(forplayerid))
	{
		return ~0;
	}
	return 1;
}

hook OnActorStreamOut(actorid, forplayerid)
{
	if (!IsValidActor(actorid) || !IsPlayerConnected(forplayerid))
	{
		return ~0;
	}
	return 1;
}

hook OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if (gPlayerDebug[playerid])
	{
		new sLog[45];
		format(sLog, sizeof sLog, "OnPlayerEnterVehicle(%i, %i, %i)", playerid, vehicleid, ispassenger);
		DebugPlayer(playerid, sLog);
	}


	if (!IsPlayerConnected(playerid) || !IsValidVehicle(vehicleid))
	{
		return ~0;
	}
	return 1;
}

hook OnPlayerExitVehicle(playerid, vehicleid)
{
	if (gPlayerDebug[playerid])
	{
		new sLog[45];
		format(sLog, sizeof sLog, "OnPlayerExitVehicle(%i, %i)", playerid, vehicleid);
		DebugPlayer(playerid, sLog);
	}


	if (!IsPlayerConnected(playerid) || !IsValidVehicle(vehicleid))
	{
		return ~0;
	}
	return 1;
}

hook OnPlayerEditAttachedObj(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if (!IsPlayerConnected(playerid) || !(0 <= response <= 1) || !(0 <= index <= 9) || !IsIDEValid(modelid) || !(1 <= boneid <= 18) ||
		!(-10.0 <= fOffsetX <= 10.0) || !(-10.0 <= fOffsetY <= 10.0) || !(-10.0 <= fOffsetZ <= 10.0) || !(-360.0 <= fRotX <= 360.0) || !(-360.0 <= fRotY <= 360.0) || !(-360.0 <= fRotZ <= 360.0) || !(-10.0 <= fScaleX <= 10.0) || !(-10.0 <= fScaleY <= 10.0) || !(-10.0 <= fScaleZ <= 10.0))
	{
		// provera za ispravan modelid (da je jednak modelu koji je bio pre pozivanja EditAttachedObject) se nalazi u attachedobject_ex.inc
		gEditingObjectModel[playerid] = -1;
		return ~0;
	}

	gEditingObjectModel[playerid] = -1;
	return 1;
}

hook OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if (!IsPlayerConnected(playerid) || !(0 <= playerobject <= 1) || (!playerobject && !IsValidObject(objectid)) || (playerobject && !IsValidPlayerObject(playerid, objectid)) || !(0 <= response <= 1) || (!playerobject && GetObjectModel(objectid) != gEditingObjectModel[playerid]) || (playerobject && GetPlayerObjectModel(playerid, objectid) != gEditingObjectModel[playerid]))
	{
		gEditingObjectModel[playerid] = -1;
		return ~0;
	}

	gEditingObjectModel[playerid] = -1;
	return 1;
}

// hook OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart)
// {
// 	if (IsPlayerConnected(playerid) && gPlayerDebug[playerid])
// 	{
// 		new sLog[64];
// 		format(sLog, sizeof sLog, "OnPlayerDamageDone(%i, %.1f, %i, %i, %i)", playerid, amount, issuerid, weapon, bodypart);
// 		DebugPlayer(playerid, sLog);
// 	}
// 	if (IsPlayerConnected(issuerid) && gPlayerDebug[issuerid])
// 	{
// 		new sLog[64];
// 		format(sLog, sizeof sLog, "OnPlayerDamageDone(%i, %.1f, %i, %i, %i)", issuerid, amount, issuerid, weapon, bodypart);
// 		DebugPlayer(issuerid, sLog);
// 	}
// 	return 1;
// }

/*hook OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if (gPlayerDebug[playerid])
	{
		new sLog[64];
		format(sLog, sizeof sLog, "OnPlayerGiveDamage(%i, %i, %.1f, %i, %i)", playerid, damagedid, amount, weaponid, bodypart);
		DebugPlayer(playerid, sLog);
	}
	// if (!IsPlayerConnected(playerid) || !IsPlayerConnected(damagedid) || !(0.1 <= amount <= 150.0) || !(3 <= bodypart <= 9) ||
	// 	!(0 <= weaponid <= 16 || 18 <= weaponid <= 38 || 41 <= weaponid <= 42 || 49 <= weaponid <= 54))
	// {
	// 	return ~0;
	// }
	return 1;
}

hook OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if (gPlayerDebug[playerid])
	{
		new sLog[64];
		format(sLog, sizeof sLog, "OnPlayerTakeDamage(%i, %i, %.1f, %i, %i)", playerid, issuerid, amount, weaponid, bodypart);
		DebugPlayer(playerid, sLog);
	}
	// if (!IsPlayerConnected(playerid) || !(0.1 <= amount <= 150.0) || !(3 <= bodypart <= 9) ||
	// 	!(0 <= weaponid <= 16 || 18 <= weaponid <= 38 || 41 <= weaponid <= 42 || 49 <= weaponid <= 54))
	// {
	// 	return ~0;
	// }
	return 1;
}*/

hook OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

hook OnPlayerObjectMoved(playerid, objectid)
{
	if (!IsPlayerConnected(playerid) || !IsValidPlayerObject(playerid, objectid))
	{
		return ~0;
	}
	return 1;
}

hook OnPlayerStateChange(playerid, newstate, oldstate)
{
	if (gPlayerDebug[playerid])
	{
		new sLog[45];
		format(sLog, sizeof sLog, "OnPlayerStateChange(%i, %i, %i)", playerid, newstate, oldstate);
		DebugPlayer(playerid, sLog);
	}

	if (!IsPlayerConnected(playerid) || !(0 <= newstate <= 9) || !(0 <= oldstate <= 9))
	{
		return ~0;
	}
	return 1;
}





// ========================================================================== //
//                        <section> Funkcije </section>                       //
// ========================================================================== //
stock CountPlayersWithIP(const test_ip[])
{
	new ip[16], count = 0;
	foreach (new i : Player)
	{
		GetPlayerIp(i, ip, sizeof ip);
		if (!strcmp(test_ip, ip)) 
		{
			count ++;
		}
	}
	return count;
}

stock TogglePlayerDebug(playerid, bool:toggle)
{
	gPlayerDebug[playerid] = toggle;
}

stock DebugPlayer(playerid, const string[])
{
	new sPath[43], sName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, sName, sizeof sName);
	format(sPath, sizeof sPath, "logs/debug/%s.txt", sName);
	Log_Write(sPath, string);
	return 1;
}

stock OW_EditObject(playerid, objectid)
{
	if (IsPlayerConnected(playerid) && IsValidObject(objectid))
	{
		gEditingObjectModel[playerid] = GetObjectModel(objectid);
		return EditObject(playerid, objectid);
	}
	else
	{
		gEditingObjectModel[playerid] = -1;
		return 0;
	}
}
#if defined _ALS_EditObject
    #undef EditObject
#else
    #define _ALS_EditObject
#endif
#define EditObject OW_EditObject




stock OW_EditPlayerObject(playerid, objectid)
{
	if (IsPlayerConnected(playerid) && IsValidPlayerObject(playerid, objectid))
	{
		gEditingObjectModel[playerid] = GetPlayerObjectModel(playerid, objectid);
		return EditPlayerObject(playerid, objectid);
	}
	else
	{
		gEditingObjectModel[playerid] = -1;
		return 0;
	}
}
#if defined _ALS_EditPlayerObject
    #undef EditPlayerObject
#else
    #define _ALS_EditPlayerObject
#endif
#define EditPlayerObject OW_EditPlayerObject




// Da li je validan poslati model objekta?
stock IsIDEValid(input) 
{
	switch(input) 
	{
		case 615..661: return true;
		case 664: return true;
		case 669..698: return true;
		case 700..792: return true;
		case 800..906: return true;
		case 910..964: return true;
		case 966..998: return true;
		case 1000..1193: return true;
		case 1207..1325: return true;
		case 1327..1572: return true;
		case 1574..1698: return true;
		case 1700..2882: return true;
		case 2885..3135: return true;
		case 3167..3175: return true;
		case 3178: return true;
		case 3187: return true;
		case 3193: return true;
		case 3214: return true;
		case 3221: return true;
		case 3241..3244: return true;
		case 3246: return true;
		case 3249..3250: return true;
		case 3252..3253: return true;
		case 3255..3265: return true;
		case 3267..3347: return true;
		case 3350..3415: return true;
		case 3417..3428: return true;
		case 3430..3609: return true;
		case 3612..3783: return true;
		case 3785..3869: return true;
		case 3872..3882: return true;
		case 3884..3888: return true;
		case 3890..3973: return true;
		case 3975..4541: return true;
		case 4550..4762: return true;
		case 4806..5084: return true;
		case 5086..5089: return true;
		case 5105..5375: return true;
		case 5390..5682: return true;
		case 5703..6010: return true;
		case 6035..6253: return true;
		case 6255..6257: return true;
		case 6280..6347: return true;
		case 6349..6525: return true;
		case 6863..7392: return true;
		case 7415..7973: return true;
		case 7978..9193: return true;
		case 9205..9267: return true;
		case 9269..9478: return true;
		case 9482..10310: return true;
		case 10315..10744: return true;
		case 10750..11417: return true;
		case 11420..11753: return true;
		case 12800..13563: return true;
		case 13590..13667: return true;
		case 13672..13890: return true;
		case 14383..14528: return true;
		case 14530..14554: return true;
		case 14556: return true;
		case 14558..14643: return true;
		case 14650..14657: return true;
		case 14660..14695: return true;
		case 14699..14728: return true;
		case 14735..14765: return true;
		case 14770..14856: return true;
		case 14858..14883: return true;
		case 14885..14898: return true;
		case 14900..14903: return true;
		case 15025..15064: return true;
		case 16000..16790: return true;
		case 17000..17474: return true;
		case 17500..17974: return true;
		case 17976: return true;
		case 17978: return true;
		case 18000..18036: return true;
		case 18038..18102: return true;
		case 18104..18105: return true;
		case 18109: return true;
		case 18112: return true;
		case 18200..18859: return true;
		case 18862..19198: return true;
		case 19200..19274: return true;
		case 19277..19595: return true;
		case 19597..19999: return true;
	}

	return false;
}

stock GetVehicleMaxPassengers(iModel)
{
    if(400 <= iModel <= 611)
    {
        static
            s_MaxPassengers[] =
            {
                271782163, 288428337, 288559891, -2146225407, 327282960, 271651075, 268443408, 286339857, 319894289, 823136512, 805311233,
                285414161, 286331697, 268513553, 18026752, 286331152, 286261297, 286458129, 856765201, 286331137, 856690995, 269484528, 
                51589393, -15658689, 322109713, -15527663, 65343    
            }
        ;
        return ((s_MaxPassengers[(iModel -= 400) >>> 3] >>> ((iModel & 7) << 2)) & 0xF);
    }
    return 0xF;
}




// ========================================================================== //
//                          <section> MySQL </section>                        //
// ========================================================================== //





// ========================================================================== //
//                        <section> Dijalozi </section>                       //
// ========================================================================== //





// ========================================================================== //
//                         <section> Komande </section>                       //
// ========================================================================== //
CMD:debug(playerid, const params[])
{
	if (!IsAdmin(playerid, 6)) return 1;

	new targetid, sName[MAX_PLAYER_NAME];
	if (sscanf(params, "u", targetid))
		return Koristite(playerid, "debug [Ime ili ID igraca]");

	TogglePlayerDebug(targetid, !gPlayerDebug[targetid]);
	GetPlayerName(targetid, sName, sizeof sName);
	InfoMsg(playerid, "Debug za igraca %s[%i] je %s.", sName, targetid, (gPlayerDebug[targetid]?("{00FF00}ukljucen"):("{FF0000}iskljucen")));
	return 1;
}